"""
Django settings for Tanks project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import socket

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


class HOST:
    PRODUCTION = False
    TEST = False
    DEVELOPMENT = False


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

if socket.gethostname().startswith('dawdle-web'):
    HOST.PRODUCTION = True
    DEBUG = False
    print("Running in PRODUCTION environment.")
elif "TRAVIS" in os.environ:
    DEBUG = False
    HOST.TEST = True
    print("Running in TESTING environment.")
else:
    # Prints out SQL queries in the console
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
            }
        },
        'loggers': {
            'django.db.backends': {
                'handlers': ['console'],
                'level': 'DEBUG',
            },
        }
    }
    DEBUG = True
    HOST.DEVELOPMENT = True
    print("Running in DEVELOPMENT environment.")

# SECURITY WARNING: keep the secret key used in production secret!
if HOST.PRODUCTION:
    raise EnvironmentError("Environment variable {0} NOT SET!".format(env_var_name))
    from .prod_conf import SECRET_KEY
else:
    SECRET_KEY = 'thisisarandomsecretkeyforthetestingenvironment'

ALLOWED_HOSTS = ['dtasev.me', 'www.dtasev.me']
if HOST.DEVELOPMENT:
    ALLOWED_HOSTS.append('127.0.0.1')
    ALLOWED_HOSTS.append('localhost')
    CORS_ORIGIN_WHITELIST = (
        '127.0.0.1:8001',
        'localhost:8001',
        'null'
    )
# Application definition

INSTALLED_APPS = [
    'tanksapi.apps.TanksApiConfig',
    'rest_framework',
    'django_extensions',
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Tanks.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Tanks.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

if HOST.PRODUCTION:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'tanksdb',
            'USER': 'tanksclient',
            'PASSWORD': 'majorprojectpasswordforproject',
            'HOST': '146.148.25.165',
            'PORT': '',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

if HOST.PRODUCTION:
    # Full path to the folder where the static files on the production server will be collected
    STATIC_ROOT = '/home/dimtasev/staticfiles/tanks'
elif HOST.DEVELOPMENT:
    STATIC_ROOT = os.path.join(BASE_DIR, 'tanks_static')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/tanks-static/'

# Redirect to home URL after login (Default redirects to /accounts/profile/)
LOGIN_REDIRECT_URL = '/tanks/'

# Configuration for Rest Framework
# http://www.django-rest-framework.org
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "tanks_frontend", "static"),
]
